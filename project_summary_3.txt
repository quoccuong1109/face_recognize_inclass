            --- Start of diemdanh.html ---
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Điểm danh</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='styles.css') }}">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</head>
<body>
    <header class="animate__animated animate__fadeInDown">
        <h1>Điểm danh</h1>
        <button id="homeButton" class="home-button"><i class="fas fa-home"></i> Trở về trang chủ</button>
    </header>

    <main>
        <section class="hero animate__animated animate__fadeInUp">
            <div id="camera" class="camera-container">
                <img id="videoFeed" src="{{ url_for('attendance_feed') }}" alt="Video Feed">
            </div>
            <div id="attendanceInfo" class="attendance-info">
                <h2>Thông tin điểm danh</h2>
                <p id="studentCount">Số lượng học sinh: 0</p>
                <ul id="studentList"></ul>
            </div>
        </section>
    </main>

    <script>
        document.getElementById('homeButton').addEventListener('click', function() {
            window.location.href = '/';
        });

        function updateAttendanceInfo() {
            fetch('/get_attendance')
                .then(response => response.json())
                .then(data => {
                    const studentCountElement = document.getElementById('studentCount');
                    const studentListElement = document.getElementById('studentList');
                    studentCountElement.textContent = `Số lượng học sinh: ${data.students.length}`;
                    studentListElement.innerHTML = '';
                    data.students.forEach(student => {
                        const listItem = document.createElement('li');
                        listItem.textContent = student.name;
                        studentListElement.appendChild(listItem);
                    });
                })
                .catch(error => {
                    console.error('Error fetching attendance info:', error);
                });
        }

        setInterval(updateAttendanceInfo, 5000); // Cập nhật thông tin điểm danh mỗi 5 giây
    </script>
</body>
</html>            --- End of diemdanh.html ---
            --- Start of index.html ---
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Trang web điểm danh học sinh tự động bằng công nghệ AI</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='styles.css') }}">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</head>
<body>
    <header class="animate__animated animate__fadeInDown">
        <h1>Trang web điểm danh học sinh tự động bằng công nghệ AI</h1>
        <button id="deleteDataButton" class="delete-button"><i class="fas fa-trash-alt"></i> Xóa dữ liệu đã train</button>
        <button id="addFaceButton" class="delete-button"><i class="fas fa-user-plus"></i> Thêm dữ liệu khuôn mặt</button>
        <button id="trainModelButton" class="delete-button"><i class="fas fa-cogs"></i> Huấn luyện mô hình</button>
        <button id="attendanceButton" class="delete-button"><i class="fas fa-check-circle"></i> Điểm danh</button>
    </header>

    <main>
        <section class="hero animate__animated animate__fadeInUp">
            <h2>Chào mừng bạn đến với hệ thống điểm danh tự động</h2>
            <p>Sử dụng công nghệ AI để nhận diện khuôn mặt và điểm danh học sinh một cách nhanh chóng và chính xác.</p>
        </section>
    </main>

    <script>
        document.getElementById('deleteDataButton').addEventListener('click', function() {
            Swal.fire({
                title: 'Bạn có chắc chắn?',
                text: "Bạn sẽ không thể hoàn tác hành động này!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Vâng, xóa nó!',
                cancelButtonText: 'Hủy'
            }).then((result) => {
                if (result.isConfirmed) {
                    fetch('/delete_data', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ confirm: true })
                    })
                    .then(response => response.json())
                    .then(data => {
                        Swal.fire({
                            title: 'Thành công!',
                            text: data.message,
                            icon: 'success',
                            confirmButtonText: 'OK'
                        });
                    })
                    .catch(error => {
                        Swal.fire({
                            title: 'Lỗi!',
                            text: 'Có lỗi xảy ra khi xóa dữ liệu.',
                            icon: 'error',
                            confirmButtonText: 'OK'
                        });
                        console.error('Error deleting data:', error);
                    });
                }
            });
        });

        document.getElementById('addFaceButton').addEventListener('click', function() {
            window.location.href = '/add_face';
        });

        document.getElementById('trainModelButton').addEventListener('click', function() {
            fetch('/train_model', { method: 'POST' })
                .then(response => response.json())
                .then(data => {
                    Swal.fire({
                        title: 'Thành công!',
                        text: data.message,
                        icon: 'success',
                        confirmButtonText: 'OK'
                    });
                })
                .catch(error => {
                    Swal.fire({
                        title: 'Lỗi!',
                        text: 'Có lỗi xảy ra khi huấn luyện mô hình.',
                        icon: 'error',
                        confirmButtonText: 'OK'
                    });
                    console.error('Error training model:', error);
                });
        });

        document.getElementById('attendanceButton').addEventListener('click', function() {
            window.location.href = '/attendance';
        });
    </script>
</body>
</html>            --- End of index.html ---
        --- Start of face_recognition_model.py ---
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense

def create_model():
    model = Sequential([
        Conv2D(32, (3, 3), activation='relu', input_shape=(64, 64, 3)),
        MaxPooling2D((2, 2)),
        Flatten(),
        Dense(128, activation='relu'),
        Dense(10, activation='softmax')  # Giả sử bạn có 10 học sinh
    ])
    model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])
    return model        --- End of face_recognition_model.py ---
        --- Start of __init__.py ---
        --- End of __init__.py ---
        --- Start of capture_images.py ---
import cv2
import os

def capture_images_from_camera(output_dir, num_images=100):
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)

    cap = cv2.VideoCapture(0)
    count = 0

    while count < num_images:
        ret, frame = cap.read()
        if not ret:
            break

        cv2.imshow('Capture', frame)
        cv2.imwrite(os.path.join(output_dir, f'image_{count}.jpg'), frame)
        count += 1

        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    cap.release()
    cv2.destroyAllWindows()

if __name__ == "__main__":
    capture_images_from_camera('data\\raw_images')        --- End of capture_images.py ---
        --- Start of data_preprocessing.py ---
import os
import cv2
import numpy as np

def preprocess_images(input_folder, output_folder):
    if not os.path.exists(output_folder):
        os.makedirs(output_folder)

    for root, dirs, files in os.walk(input_folder):
        for file in files:
            file_path = os.path.join(root, file)
            img = cv2.imread(file_path)
            gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
            resized = cv2.resize(gray, (128, 128))
            output_path = os.path.join(output_folder, file)
            cv2.imwrite(output_path, resized)

input_folder = 'data/raw_images'
output_folder = 'data/processed_images'
preprocess_images(input_folder, output_folder)        --- End of data_preprocessing.py ---
        --- Start of train_model.py ---
import os
import numpy as np
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense

def load_data(data_folder):
    images = []
    labels = []
    for root, dirs, files in os.walk(data_folder):
        for file in files:
            file_path = os.path.join(root, file)
            img = cv2.imread(file_path, cv2.IMREAD_GRAYSCALE)
            img = img / 255.0
            images.append(img)
            label = int(file.split('_')[0])
            labels.append(label)
    return np.array(images), np.array(labels)

data_folder = 'data/processed_images'
images, labels = load_data(data_folder)
images = images.reshape(-1, 128, 128, 1)

model = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=(128, 128, 1)),
    MaxPooling2D((2, 2)),
    Conv2D(64, (3, 3), activation='relu'),
    MaxPooling2D((2, 2)),
    Flatten(),
    Dense(128, activation='relu'),
    Dense(len(set(labels)), activation='softmax')
])

model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])
model.fit(images, labels, epochs=10, validation_split=0.2)

model.save('models/face_recognition_model.h5')        --- End of train_model.py ---
